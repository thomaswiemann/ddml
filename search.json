[{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://thomaswiemann.com/ddml/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://thomaswiemann.com/ddml/articles/ddml.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"article gives brief introduction double/debiased machine learning using short-stacking R. Topics discussed include: Estimation single machine learner Estimation multiple machine learners & short-stacking Estimation using different types short-stacking See Articles discussions advanced topics.","code":""},{"path":"https://thomaswiemann.com/ddml/articles/ddml.html","id":"estimation-with-a-single-machine-learner","dir":"Articles","previous_headings":"","what":"Estimation with a Single Machine Learner","title":"Get Started","text":"illustration, apply ddml included random subsample 5,000 observations data Angrist & Evans (1998). data contains information labor supply mothers, children, well demographic data. See ?AE98 details. ddml_late estimates local average treatment effect (LATE) using double/debiased machine learning (see ?ddml_late). high-dimensional nuisance parameters arising estimate LATE conditional expectation functions control variables \\(X\\). particular, require first step estimates \\(E[Y|Z=z, X], E[D|Z=z, X]\\) \\(z=0,1\\) \\(E[Z|X]\\). absence functional form assumptions, conditional expectations need estimated nonparametrically. , consider gradient boosting form popular xgboost package estimate nuisance parameters. function mdl_xgboost wrapper xgboost, allowing specify parameters original function. See ?mdl_xgboost details take look vignette(\"keras_wrapper\") learn write wrapper different machine learner (’s super easy!). Double/debiased machine learning relies cross-fitting avoid large bias overfitting estimating nuisance parameters. argument sample_folds = 10 implies \\(9/10=4,500\\) observations used train machine learner cross-fitting sample fold. (Note estimation based random subsample 5,000 observations. results can thus readily compared Angrist & Evans (1998).)","code":"# Load ddml and set seed library(ddml) set.seed(35611)  # Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] Z = AE98[, \"samesex\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")] # Specify a single learner learners_single <- list(what = mdl_xgboost,                         args = list(nrounds = 100,                                     max_depth = 1)) # Estimate the local average treatment effect using xgboost. late_fit <- ddml_late(y, D, Z, X,                       learners = learners_single,                       sample_folds = 10,                       silent = TRUE) summary(late_fit) #> LATE estimation results:  #>   #>     Estimate Std. Error    t value Pr(>|t|) #>   -0.1869242  0.1934124 -0.9664541 0.333817"},{"path":"https://thomaswiemann.com/ddml/articles/ddml.html","id":"estimation-with-multiple-machine-learners-short-stacking","dir":"Articles","previous_headings":"","what":"Estimation with Multiple Machine Learners & Short-Stacking","title":"Get Started","text":"Since statistical properties machine learners depend heavily underlying (unknown!) structure data, adaptive combination multiple machine learners can increase robustness. snippet, ddml_late estimates LATE short-stacking based four base learners: linear regression (see ?ols) lasso (see ?mdl_glmnet) ridge gradient boosting (see ?mdl_xgboost) Short-stacking computationally convenient variant stacking originally introduced Wolpert (1992). Stacking constructs linear combinations base learners minimize --sample mean squared error particular reduced form (e.g., \\(E[Z|X]\\)). Short-stacking uses --sample predictions naturally arise computation double/debiased machine learning estimates due cross-fitting, substantially reduces computational burden (see vignette(\"stacking\")). finite samples, regularizing linear combination base learners construced via (short-)stacking can improve statistical properties. can specified via ensemble_type argument. , ddml_late estimates nuisance parameters via linear combinations four base learners linear coefficients constrained non-negative sum one. often insightful see base learners contribute final reduced form estimates. snippet shows weights reduced forms \\(E[Y|Z=0,X]\\) \\(E[Y|Z=1,X]\\):","code":"learners_multiple <- list(list(fun = ols),                           list(fun = mdl_glmnet),                           list(fun = mdl_glmnet,                                args =list(alpha = 0)),                           list(fun = mdl_xgboost,                                args = list(nrounds = 100,                                            max_depth = 1))) # Estimate the local average treatment effect using short-stacking with base #     learners ols, lasso, ridge, and xgboost. late_fit <- ddml_late(y, D, Z, X,                       learners = learners_multiple,                       ensemble_type = 'nnls1',                       shortstack = TRUE,                       sample_folds = 10,                       silent = TRUE) summary(late_fit) #> LATE estimation results:  #>   #>         Estimate Std. Error   t value  Pr(>|t|) #> nnls1 -0.2047542  0.1958408 -1.045514 0.2957856 cat(\"Stacking weights for E[Y|Z=0, X]: \\n\") #> Stacking weights for E[Y|Z=0, X]: t(late_fit$weights$y_X_Z0) #>           [,1]      [,2]     [,3]      [,4] #> nnls1 0.110455 0.4987505 0.186514 0.2042806  cat(\"Stacking weights for E[Y|Z=1, X]: \\n\") #> Stacking weights for E[Y|Z=1, X]: t(late_fit$weights$y_X_Z1) #>            [,1]      [,2] [,3]    [,4] #> nnls1 0.1885013 0.4804288    0 0.33107"},{"path":"https://thomaswiemann.com/ddml/articles/ddml.html","id":"estimation-using-different-types-of-short-stacking","dir":"Articles","previous_headings":"","what":"Estimation using Different Types of Short-Stacking","title":"Get Started","text":"ddml supports multiple schemes constructing linear combinations base learners. Since relies --sample predictions base learners, computationally cheap compute simultaneously. snippet estimates LATE using base learners four different linear combinations: 'nls' constraints coefficients base learner non-negative 'singlebest' selects single MSPE-minimizing base learner 'ols constructs unconstrained linear combinations base learners 'average' computes unweighted average base learners","code":"# Estimate the local average treatment effect using short-stacking with base #     learners ols, lasso, ridge, and xgboost. late_fit <- ddml_late(y, D, Z, X,                       learners = learners_multiple,                       ensemble_type = c('nnls', 'singlebest',                                          'ols', 'average'),                       shortstack = TRUE,                       sample_folds = 10,                       silent = TRUE) summary(late_fit) #> LATE estimation results:  #>   #>              Estimate Std. Error    t value  Pr(>|t|) #> nnls       -0.2130483  0.1963655 -1.0849579 0.2779403 #> singlebest -0.2365084  0.2003431 -1.1805166 0.2377948 #> ols        -0.2091992  0.1965854 -1.0641642 0.2872543 #> average    -0.1867240  0.1890113 -0.9878986 0.3232023"},{"path":"https://thomaswiemann.com/ddml/articles/ddml.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get Started","text":"Angrist J, Evans W, (1998). “Children Parents’ Labor Supply: Evidence Exogenous Variation Family Size.” American Economic Review, 88(3), 450-477. Wolpert D H (1992). “Stacked generalization.” Neural Networks, 5(2), 241-259.","code":""},{"path":"https://thomaswiemann.com/ddml/articles/example_401k.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example on the Effect of 401k Participation","text":"","code":"library(ddml)"},{"path":"https://thomaswiemann.com/ddml/articles/example_401k.html","id":"data-construction","dir":"Articles","previous_headings":"","what":"Data construction","title":"Example on the Effect of 401k Participation","text":"401K data Survey Income Program Participation (SIPP) year 1991. Data taken thereproduction exercise Chernozhukov et al. (2018). link","code":"library(readstata13) SIPP91 <- read.dta13(\"data/sipp1991.dta\") nobs <- nrow(SIPP91) y <- as.matrix(SIPP91$net_tfa) D <- as.matrix(SIPP91$e401) X <- as.matrix(SIPP91[, c(\"age\", \"inc\", \"educ\", \"fsize\",                        \"marr\", \"twoearn\", \"db\", \"pira\", \"hown\")])  nobs"},{"path":"https://thomaswiemann.com/ddml/articles/example_BLP95.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example using Berry, Levinson, Pakes (1995)","text":"revisits empirical example Chernozhukov, Hansen, Spindler (2015) (CHS2015, hereafter), extends instruments Berry, Levinson, Pakes (1995) (BLP1995, hereafter) applies instrument selection procedure based Lasso. consider instrument extension apply selection ensemble procedures combines conventional linear estimators computational alternatives including Lasso-based approaches random forests.","code":"library(ddml)"},{"path":"https://thomaswiemann.com/ddml/articles/example_BLP95.html","id":"data-construction","dir":"Articles","previous_headings":"","what":"Data construction","title":"Example using Berry, Levinson, Pakes (1995)","text":"Automobile market data Berry, Levinsohn, Pakes (1995) retrived reproduction excercise Chernozhukov, Hansen, Spindler (2015). link BLP1995 data included exemplary dataset ddml package name BLP95. now construct BLP1995 instruments, sums product characteristics (excluding price potentially endogenous variables) products offered firm well competing firms. exact instrument specification follows approach CHS2015. addition, may interested extending list instruments. constructs additional instruments considered CHS2015.","code":"BLP95 <- readRDS(\"data/BLP95.rds\") nobs <- length(BLP95$id) y <- as.matrix(log(BLP95$share) -  log(BLP95$outshr)) D <- as.matrix(BLP95$price) x1 <- as.matrix(cbind(1, BLP95[, c(\"hpwt\", \"air\", \"mpd\", \"space\", \"price\")])) colnames(y) <- \"share\" colnames(D) <- \"price\" X_ <- x1[, 1:5]; ncol_X <- ncol(X_) # exclude price sum_other <- sum_rival <- matrix(0, nobs, 5) for (i in 1:nobs) {   other_ind <- (BLP95$firmid == BLP95$firmid[i]) &     (BLP95$cdid == BLP95$cdid[i]) & (BLP95$id != BLP95$id[i])   rival_ind <- (BLP95$firmid != BLP95$firmid[i]) &     (BLP95$cdid == BLP95$cdid[i])   sum_other[i, ] <- colSums(X_[other_ind, , drop = FALSE])   sum_rival[i, ] <- colSums(X_[rival_ind, , drop = FALSE]) }#FOR Z_ <- cbind(sum_other, sum_rival); ncol_Z <- ncol(Z_) tu = BLP95$trend/19; mpdu = BLP95$mpd/7; spaceu = BLP95$space/2; XL_ <- as.matrix(cbind(1, BLP95[, c(\"hpwt\", \"air\")], mpdu, spaceu, tu,                        BLP95$hpwt^2, BLP95$hpwt^3, mpdu^2, mpdu^3,                        spaceu^2, spaceu^3, tu^2, tu^3, BLP95$hpwt *                          BLP95$air,  mpdu * BLP95$air, spaceu *                          BLP95$air, tu * BLP95$air, BLP95$hpwt *                          mpdu, BLP95$hpwt * spaceu, BLP95$hpwt * tu,                        mpdu * spaceu,  mpdu * tu, spaceu * tu)) ncol_XL <- ncol(XL_) sum_otherL <- sum_rivalL <- matrix(0, nobs, 24) for (i in 1:nobs) {   other_ind <- (BLP95$firmid == BLP95$firmid[i]) &     (BLP95$cdid == BLP95$cdid[i]) & (BLP95$id != BLP95$id[i])   rival_ind <- (BLP95$firmid != BLP95$firmid[i]) &     (BLP95$cdid == BLP95$cdid[i])   sum_otherL[i, ] <- colSums(XL_[other_ind, , drop = FALSE])   sum_rivalL[i, ] <- colSums(XL_[rival_ind, , drop = FALSE]) }#FOR ZL_ <- cbind(sum_otherL,sum_rivalL); ncol_ZL <- ncol(ZL_)"},{"path":"https://thomaswiemann.com/ddml/articles/example_BLP95.html","id":"estimating-the-flexible-partially-linear-iv-model-with-cv-lasso","dir":"Articles","previous_headings":"","what":"Estimating the Flexible Partially Linear IV Model with CV-Lasso","title":"Example using Berry, Levinson, Pakes (1995)","text":"","code":"# Base learner learner <- list(what = mdl_glmnet)  # DDML IV. We consider cross-residiualization across 10 sample folds here. lasso_fit <- ddml_fpliv(y, D = D,                            Z = ZL_, X = XL_,                            learners = learner,                            sample_folds = 3,                            silent = T) lasso_fit$coef"},{"path":"https://thomaswiemann.com/ddml/articles/example_BLP95.html","id":"estimating-the-flexible-partially-linear-iv-model-with-stacking","dir":"Articles","previous_headings":"","what":"Estimating the Flexible Partially Linear IV Model with Stacking","title":"Example using Berry, Levinson, Pakes (1995)","text":"#’ ambitious approach may consider variety computational models #’ estimation first second stage. , consider #’ combination linear models, including unpenalized, Lasso Ridge #’ regression, random forests, generalized random forests #’ (Athey et al., 2019), boosted trees, using either inital set #’ instruments BLP1995 extended set CHS2015. , #’ specify seperate first second stage model sets (although #’ strictly necessary). #’ Combine data. ’s convinient specify sets indices easier #’ column selection model specification. using random forests, #’ ’s important variables columnames.","code":"X_c <- cbind(X_, XL_); colnames(X_c) <- c(1:ncol(X_c)) Z_c <- cbind(Z_, ZL_); colnames(Z_c) <- c(1:ncol(Z_c)) set_X <- 1:ncol(X_); set_XL <- setdiff(c(1:ncol(X_c)), set_X) set_Z <- 1:ncol(Z_); set_ZL <- setdiff(c(1:ncol(Z_c)), set_Z)"},{"path":"https://thomaswiemann.com/ddml/articles/example_BLP95.html","id":"estimating-the-flexible-partially-linear-iv-model-with-short-stacking","dir":"Articles","previous_headings":"","what":"Estimating the Flexible Partially Linear IV Model with Short-Stacking","title":"Example using Berry, Levinson, Pakes (1995)","text":"","code":"# Base learners learners <- list(list(fun = ols,                        assign_X = set_X,                        assign_Z = set_Z),                   list(fun = mdl_glmnet,                        args = list(alpha = 1),                        assign_X = set_XL,                        assign_Z = set_ZL),                   list(fun = mdl_glmnet,                        args = list(alpha = 0),                        assign_X = set_XL,                        assign_Z = set_ZL))  # DDML IV. We consider cross-residiualization across 10 sample folds here. stacking_fit <- ddml_fpliv(y, D = D,                            Z = Z_c, X = X_c,                            learners = learners,                            ensemble_type = c(\"ols\", \"nnls\", \"nnls1\",                                              \"singlebest\", \"average\"),                            shortstack = T,                            sample_folds = 3,                            silent = T) stacking_fit$coef"},{"path":"https://thomaswiemann.com/ddml/articles/keras_wrapper.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Constructing a User-Provided Base Learner","text":"Load keras package. Construct keras wrapper. prediction methods keras already outputs numerical vector. thus necessary also construct wrapper prediction method. first part wrapper constructs neural network architecture. simple example using relu activation function potential ell_1 regularization hidden output layers. part wrapper adjusted complicated architectures. Let’s test simple empirical example. consider BLP_1995 data , simplicity, estimate partially linear model (rather partially linear iv model). Next, need specify particular neural network learner want use. addition architecture, ’s important properly tune optimization algorithm. callback_list helps specifying learning rate adjustments defines early stopping rule. can now run ddml estimator. Note set verbose TRUE list arguments, live training output automatically plotted. helpful assessing whether defined training parameters sensible. Since substantially slows training process, however, verbose set FALSE whenever ’re planning actively monitor output.","code":"library(ddml) library(keras) #> Error in library(keras): there is no package called 'keras' mdl_keras <- function(y, X,                       units = 10, nhidden = 1, lambda1 = 0, lambda2 = 0,                       optimizer_fun = \"rmsprop\",                       loss = \"mse\",                       epochs = 10,                       batch_size = min(1000, length(y)),                       validation_split = 0,                       callbacks = NULL,                       steps_per_epoch = NULL,                       metrics = c(\"mae\"),                       verbose = 0) {    # ============================================================================   # ADJUST FOR DIFFERENT ARCHITECTURES =========================================    # Construct neural network architecture   nnet <- keras_model_sequential()   for (k in 1:nhidden) {     nnet <- nnet %>%       layer_dense(units = units, use_bias = T,                   activation = \"relu\",                   kernel_regularizer = regularizer_l1(l = lambda1))   }#FOR   nnet <- nnet %>%     layer_dense(units = 1, use_bias = T,                 kernel_regularizer = regularizer_l1(l = lambda2))    # ============================================================================   # ADJUST FOR DIFFERENT ARCHITECTURES =========================================    # Compile model   nnet %>% keras::compile(optimizer = optimizer_fun,                            loss = loss,                            metrics = metrics)    # Fit neural net   nnet %>% keras::fit(X, y,                        epochs = epochs,                        batch_size = batch_size,                        validation_split = validation_split,                        callbacks = callbacks,                        steps_per_epoch = steps_per_epoch,                        verbose = verbose)    # Amend class   class(nnet) <- c(\"mdl_keras\", class(nnet))    # Return fit   return(nnet) }#MDL_KERAS predict.mdl_keras <- function(obj, newdata = NULL){   # Check for new data   #if(is.null(newdata)) newdata <- obj$X   # Predict data and output as matrix   class(obj) <- class(obj)[-1] # Not a pretty solution...   as.numeric(predict(obj, newdata)) }#PREDICT.MDL_KERAS y <- log(BLP_1995$share) / log(BLP_1995$outshr) #> Error in eval(expr, envir, enclos): object 'BLP_1995' not found D <- BLP_1995$price #> Error in eval(expr, envir, enclos): object 'BLP_1995' not found X <- cbind(BLP_1995$space, BLP_1995$hpwt) #> Error in eval(expr, envir, enclos): object 'BLP_1995' not found callbacks_list <- list(callback_early_stopping(monitor = \"val_loss\",                                                             patience = 15,                                                             restore_best_weights = T),                                     callback_reduce_lr_on_plateau(monitor = \"val_loss\",                                                                   factor = 1/10,                                                                   patience = 10,                                                                   verbose = F),                                     callback_learning_rate_scheduler(                                       function(epoch, learning_rate){                                         if(epoch == 0) learning_rate <- 0.1                                         return(learning_rate)                                       })) #> Error in callback_early_stopping(monitor = \"val_loss\", patience = 15, : could not find function \"callback_early_stopping\"  learners = list(what = mdl_keras,                       args = list(units = 10, nhidden = 1, lambda1 = 0, lambda2 = 0,                                   epochs = 50,                                   verbose = F,                                   validation_split = 0.1,                                   callbacks = callbacks_list)) #> Error in eval(expr, envir, enclos): object 'callbacks_list' not found plm_fit <- ddml_plm(y, D, X, learners = learners) #> Error in eval(expr, envir, enclos): object 'y' not found plm_fit$coef #> Error in eval(expr, envir, enclos): object 'plm_fit' not found learners = list(list(fun = mdl_keras,                       args = list(units = 10, nhidden = 1, lambda1 = 0, lambda2 = 0,                                   epochs = 50,                                   verbose = F,                                   validation_split = 0.1,                                   callbacks = callbacks_list)),                 list(fun = mdl_keras,                       args = list(units = 5, nhidden = 2, lambda1 = 0, lambda2 = 0,                                   epochs = 50,                                   verbose = F,                                   validation_split = 0.1,                                   callbacks = callbacks_list))) #> Error in eval(expr, envir, enclos): object 'callbacks_list' not found  plm_fit <- ddml_plm(y, D, X, learners = learners, shortstack = TRUE) #> Error in eval(expr, envir, enclos): object 'y' not found plm_fit$coef #> Error in eval(expr, envir, enclos): object 'plm_fit' not found"},{"path":"https://thomaswiemann.com/ddml/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Achim Ahrens. Author. Christian B Hansen. Author. Mark E Schaffer. Author. Thomas Wiemann. Author, maintainer.","code":""},{"path":"https://thomaswiemann.com/ddml/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ahrens , Hansen C, Schaffer M, Wiemann T (2023). ddml: Double/Debiased Machine Learning R. https://github.com/thomaswiemann/ddml, https://thomaswiemann.com/ddml/.","code":"@Manual{,   title = {ddml: Double/Debiased Machine Learning in R},   author = {Achim Ahrens and Christian B Hansen and Mark E Schaffer and Thomas Wiemann},   year = {2023},   note = {https://github.com/thomaswiemann/ddml, https://thomaswiemann.com/ddml/}, }"},{"path":"https://thomaswiemann.com/ddml/index.html","id":"ddml","dir":"","previous_headings":"","what":"Double/Debiased Machine Learning in R","title":"Double/Debiased Machine Learning in R","text":"ddml implementation double/debiased machine learning estimators proposed Chernozhukov et al. (2018). key benefit package straightforward estimation nuisance parameters using (short-)stacking (Wolpert, 1992), allows multiple machine learners increase robustness underlying data generating process. ddml sister R package Stata package, mirroring key features also leveraging R simplify estimation user-provided learners /sparse matrices. See also Ahrens et al. (2023) additional discussion supported causal models benefits (short)-stacking.","code":""},{"path":"https://thomaswiemann.com/ddml/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Double/Debiased Machine Learning in R","text":"Install latest development version GitHub (requires devtools package):","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"thomaswiemann/ddml\", dependencies = TRUE)"},{"path":"https://thomaswiemann.com/ddml/index.html","id":"example-late-estimation-based-on-short-stacking","dir":"","previous_headings":"","what":"Example: LATE Estimation based on (Short-)Stacking","title":"Double/Debiased Machine Learning in R","text":"illustrate ddml simple example, consider included random subsample 5,000 observations data Angrist & Evans (1998). data contains information labor supply mothers, children, well demographic data. See ?AE98 details. ddml_late estimates local average treatment effect (LATE) using double/debiased machine learning (see ?ddml_late). Since statistical properties machine learners depend heavily underlying (unknown!) structure data, adaptive combination multiple machine learners can increase robustness. snippet, ddml_late estimates LATE short-stacking based three base learners: linear regression (see ?ols) lasso (see ?mdl_glmnet) gradient boosting (see ?mdl_xgboost)","code":"# Load ddml and set seed library(ddml) set.seed(75523)  # Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] Z = AE98[, \"samesex\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")] # Estimate the local average treatment effect using short-stacking with base #     learners ols, rlasso, and xgboost. late_fit_short <- ddml_late(y, D, Z, X,                             learners = list(list(fun = ols),                                             list(fun = mdl_glmnet),                                             list(fun = mdl_xgboost,                                                  args = list(nrounds = 100,                                                              max_depth = 1))),                             ensemble_type = 'nnls1',                             shortstack = TRUE,                             sample_folds = 10,                             silent = TRUE) summary(late_fit_short) #> LATE estimation results:  #>   #>         Estimate Std. Error   t value  Pr(>|t|) #> nnls1 -0.2105019   0.195529 -1.076576 0.2816698"},{"path":"https://thomaswiemann.com/ddml/index.html","id":"learn-more-about-ddml","dir":"","previous_headings":"","what":"Learn More about ddml","title":"Double/Debiased Machine Learning in R","text":"Check articles learn : vignette(\"ddml\") detailed introduction ddml vignette(\"stacking\") discusses computational benefits short-stacking vignette(\"keras_wrapper\") shows write user-provided base learners vignette(\"sparse\") illustrates support sparse matrices (see ?Matrix) additional applied examples, see case studies: vignette(\"example_401k\") vignette(\"example_BLP95\")","code":""},{"path":"https://thomaswiemann.com/ddml/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Double/Debiased Machine Learning in R","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). “ddml: Double/debiased machine learning Stata.” https://arxiv.org/abs/2301.09397 Angrist J, Evans W, (1998). “Children Parents’ Labor Supply: Evidence Exogenous Variation Family Size.” American Economic Review, 88(3), 450-477. Chernozhukov V, Chetverikov D, Demirer M, Duflo E, Hansen C B, Newey W, Robins J (2018). “Double/debiased machine learning treatment structural parameters.” Econometrics Journal, 21(1), C1-C68. Wolpert D H (1992). “Stacked generalization.” Neural Networks, 5(2), 241-259.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/AE98.html","id":null,"dir":"Reference","previous_headings":"","what":"Random subsample from the data of Angrist & Evans (1991). — AE98","title":"Random subsample from the data of Angrist & Evans (1991). — AE98","text":"Random subsample data Angrist & Evans (1991).","code":""},{"path":"https://thomaswiemann.com/ddml/reference/AE98.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random subsample from the data of Angrist & Evans (1991). — AE98","text":"","code":"AE98"},{"path":"https://thomaswiemann.com/ddml/reference/AE98.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random subsample from the data of Angrist & Evans (1991). — AE98","text":"data frame 5,000 rows 13 variables. worked Indicator equal 1 mother employed. weeksw Number weeks employment. hoursw Hours worked per week. morekids Indicator equal 1 mother 2 kids. samesex Indicator equal 1 first two children sex. age Age years. agefst Age years birth first child. black Indicator equal 1 mother black. hisp Indicator equal 1 mother Hispanic. othrace Indicator equal 1 mother neither black Hispanic. educ Years education. boy1st Indicator equal 1 first child male. boy2nd Indicator equal 1 second child male.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/AE98.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Random subsample from the data of Angrist & Evans (1991). — AE98","text":"https://dataverse.harvard.edu/dataset.xhtml?persistentId=hdl:1902.1/11288","code":""},{"path":"https://thomaswiemann.com/ddml/reference/AE98.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random subsample from the data of Angrist & Evans (1991). — AE98","text":"Angrist J, Evans W (1998). \"Children Parents' Labor Supply: Evidence Exogenous Variation Family Size.\" American Economic Review, 88(3), 450-477.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/crosspred.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-Predictions using Stacking. — crosspred","title":"Cross-Predictions using Stacking. — crosspred","text":"Cross-predictions using stacking.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/crosspred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-Predictions using Stacking. — crosspred","text":"","code":"crosspred(   y,   X,   Z = NULL,   learners,   sample_folds = 2,   ensemble_type = \"average\",   cv_folds = 5,   compute_insample_predictions = FALSE,   compute_predictions_bylearner = FALSE,   subsamples = NULL,   cv_subsamples_list = NULL,   silent = FALSE,   progress = NULL,   auxilliary_X = NULL )"},{"path":"https://thomaswiemann.com/ddml/reference/crosspred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-Predictions using Stacking. — crosspred","text":"y outcome variable. X (sparse) matrix predictive variables. Z Optional additional (sparse) matrix predictive variables. learners May take one two forms, depending whether single learner stacking multiple learners used estimation predictor. single learner used, learners list two named elements: base learner function. function must predicts named input y using named input X. args Optional arguments passed . stacking multiple learners used, learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding predictive variables X passed base learner. assign_Z optional vector column indices corresponding predictive Z passed base learner. Omission args element results default arguments used fun. Omission assign_X (/assign_Z) results inclusion variables X (/Z). sample_folds Number cross-fitting folds. ensemble_type Ensemble method combine base learners final estimate conditional expectation functions. Possible values : \"nnls\" Non-negative least squares. \"nnls1\" Non-negative least squares constraint weights sum one. \"singlebest\" Select base learner minimum MSPE. \"ols\" Ordinary least squares. \"average\" Simple average base learners. Multiple ensemble types may passed vector strings. cv_folds Number folds used cross-validation ensemble construction. compute_insample_predictions Indicator equal 1 -sample predictions also computed. compute_predictions_bylearner Indicator equal 1 -sample predictions also computed learner (rather entire ensemble). subsamples List vectors sample indices cross-fitting. cv_subsamples_list List lists, corresponding subsample containing vectors subsample indices cross-validation. silent Boolean silence estimation updates. progress String print learner cv fold progress. auxilliary_X optional list matrices length sample_folds, containing additional observations calculate predictions .","code":""},{"path":"https://thomaswiemann.com/ddml/reference/crosspred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-Predictions using Stacking. — crosspred","text":"crosspred returns list containing following components: oos_fitted matrix --sample predictions, column corresponding ensemble type (chronological order). weights array, providing weight assigned base learner (chronological order) ensemble procedures. is_fitted compute_insample_predictions = T. list matrices -sample predictions sample fold. auxilliary_fitted auxilliary_X NULL, list matrices additional predictions. oos_fitted_bylearner compute_predictions_bylearner = T, matrix --sample predictions, column corresponding base learner (chronological order). is_fitted_bylearner compute_insample_predictions = T compute_predictions_bylearner = T, list matrices -sample predictions sample fold. auxilliary_fitted_bylearner auxilliary_X NULL compute_predictions_bylearner = T, list matrices additional predictions learner.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/crosspred.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cross-Predictions using Stacking. — crosspred","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). \"ddml: Double/debiased machine learning Stata.\" https://arxiv.org/abs/2301.09397 Wolpert D H (1992). \"Stacked generalization.\" Neural Networks, 5(2), 241-259.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/crosspred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-Predictions using Stacking. — crosspred","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] X = AE98[, c(\"morekids\", \"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Compute cross-predictions using stacking with base learners ols and lasso. #     Two stacking approaches are simultaneously computed: Equally #     weighted (ensemble_type = \"average\") and MSPE-minimizing with weights #     in the unit simplex (ensemble_type = \"nnls1\"). Predictions for each #     learner are also calculated. crosspred_res <- crosspred(y, X,                            learners = list(list(fun = ols),                                            list(fun = mdl_glmnet)),                            ensemble_type = c(\"average\",                                              \"nnls1\",                                              \"singlebest\"),                            compute_predictions_bylearner = TRUE,                            sample_folds = 2,                            cv_folds = 2,                            silent = TRUE) dim(crosspred_res$oos_fitted) # = length(y) by length(ensemble_type) #> [1] 5000    3 dim(crosspred_res$oos_fitted_bylearner) # = length(y) by length(learners) #> [1] 5000    2"},{"path":"https://thomaswiemann.com/ddml/reference/crossval.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator of the Mean Squared Prediction Error using Cross-Validation. — crossval","title":"Estimator of the Mean Squared Prediction Error using Cross-Validation. — crossval","text":"Estimator mean squared prediction error different learners using cross-validation.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/crossval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator of the Mean Squared Prediction Error using Cross-Validation. — crossval","text":"","code":"crossval(   y,   X,   Z = NULL,   learners,   cv_folds = 5,   cv_subsamples = NULL,   silent = F,   progress = NULL )"},{"path":"https://thomaswiemann.com/ddml/reference/crossval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator of the Mean Squared Prediction Error using Cross-Validation. — crossval","text":"y outcome variable. X (sparse) matrix predictive variables. Z Optional additional (sparse) matrix predictive variables. learners learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding variables X passed base learner. assign_Z optional vector column indices corresponding variables Z passed base learner. Omission args element results default arguments used fun. Omission assign_X (/assign_Z) results inclusion predictive variables X (/Z). cv_folds Number folds used cross-validation. cv_subsamples List vectors sample indices cross-validation. silent Boolean silence estimation updates. progress String print learner cv fold progress.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/crossval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator of the Mean Squared Prediction Error using Cross-Validation. — crossval","text":"crossval returns list containing following components: mspe vector MSPE estimates, corresponding base learners (chronological order). oos_resid matrix --sample prediction errors, column corresponding base learners (chronological order). cv_subsamples Pass-cv_subsamples. See .","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/crossval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator of the Mean Squared Prediction Error using Cross-Validation. — crossval","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] X = AE98[, c(\"morekids\", \"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Compare ols, lasso, and ridge using 4-fold cross-validation cv_res <- crossval(y, X,                    learners = list(list(fun = ols),                                    list(fun = mdl_glmnet),                                    list(fun = mdl_glmnet,                                         args = list(alpha = 0))),                    cv_folds = 4,                    silent = TRUE) cv_res$mspe #> [1] 0.2374560 0.2361531 0.2361529"},{"path":"https://thomaswiemann.com/ddml/reference/ddml.html","id":null,"dir":"Reference","previous_headings":"","what":"ddml: An implementation of Double/Debiased Machine Learning — ddml","title":"ddml: An implementation of Double/Debiased Machine Learning — ddml","text":"Double/debiased machine learning.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_ate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator of the Average Treatment Effect. — ddml_ate","title":"Estimator of the Average Treatment Effect. — ddml_ate","text":"Estimator average treatment effect.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_ate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator of the Average Treatment Effect. — ddml_ate","text":"","code":"ddml_ate(   y,   D,   X,   learners,   learners_DX = learners,   sample_folds = 2,   ensemble_type = \"nnls\",   shortstack = FALSE,   cv_folds = 5,   subsamples_D0 = NULL,   subsamples_D1 = NULL,   cv_subsamples_list_D0 = NULL,   cv_subsamples_list_D1 = NULL,   silent = F )"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_ate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator of the Average Treatment Effect. — ddml_ate","text":"y outcome variable. D Binary endogenous variable interest. X (sparse) matrix control variables. learners May take one two forms, depending whether single learner stacking multiple learners used estimation conditional expectation functions. single learner used, learners list two named elements: base learner function. function must predicts named input y using named input X. args Optional arguments passed . stacking multiple learners used, learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding control variables X passed base learner. Omission args element results default arguments used fun. Omission assign_X results inclusion variables X. learners_DX Optional argument allow different estimators \\(E[D|X]\\). Setup identical learners. sample_folds Number cross-fitting folds. ensemble_type Ensemble method combine base learners final estimate conditional expectation functions. Possible values : \"nnls\" Non-negative least squares. \"nnls1\" Non-negative least squares constraint weights sum one. \"singlebest\" Select base learner minimum MSPE. \"ols\" Ordinary least squares. \"average\" Simple average base learners. Multiple ensemble types may passed vector strings. shortstack Boolean use short-stacking. cv_folds Number folds used cross-validation ensemble construction. subsamples_D0, subsamples_D1 List vectors sample indices cross-fitting, corresponding untreated treated observations, respectively. cv_subsamples_list_D0, cv_subsamples_list_D1 List lists, corresponding subsample containing vectors subsample indices cross-validation. Arguments separated untreated treated observations, respectively. silent Boolean silence estimation updates.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_ate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator of the Average Treatment Effect. — ddml_ate","text":"ddml_ate returns object S3 class ddml_ate. object class ddml_ate list containing following components: ate vector average treatment effect estimates. weights list matrices, providing weight assigned base learner (chronological order) ensemble procedure. mspe list matrices, providing MSPE base learner (chronological order) computed cross-validation step ensemble construction. psi_a, psi_b Matrices needed computation scores. Used summary.ddml_ate(). learners,learners_DX, subsamples_D0,subsamples_D1, cv_subsamples_list_D0,cv_subsamples_list_D1, ensemble_type Pass-selected user-provided arguments. See .","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_ate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimator of the Average Treatment Effect. — ddml_ate","text":"ddml_ate provides double/debiased machine learning estimator average treatment effect interactive model given \\(Y = g_0(D, X) + U,\\) \\((Y, D, X, U)\\) random vector \\(\\operatorname{supp} D = \\{0,1\\}\\), \\(E[U\\vert D, X] = 0\\), \\(\\Pr(D=1\\vert X) \\(0, 1)\\) probability 1, \\(g_0\\) unknown nuisance function. model, average treatment effect defined \\(\\theta_0^{\\textrm{ATE}} \\equiv E[g_0(1, X) - g_0(0, X)]\\).","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_ate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimator of the Average Treatment Effect. — ddml_ate","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). \"ddml: Double/debiased machine learning Stata.\" https://arxiv.org/abs/2301.09397 Chernozhukov V, Chetverikov D, Demirer M, Duflo E, Hansen C B, Newey W, Robins J (2018). \"Double/debiased machine learning treatment structural parameters.\" Econometrics Journal, 21(1), C1-C68. Wolpert D H (1992). \"Stacked generalization.\" Neural Networks, 5(2), 241-259.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/ddml_ate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator of the Average Treatment Effect. — ddml_ate","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Estimate the average treatment effect using a single base learner, ridge. ate_fit <- ddml_ate(y, D, X,                     learners = list(what = mdl_glmnet,                                     args = list(alpha = 0)),                     sample_folds = 2,                     silent = TRUE) summary(ate_fit) #> ATE estimation results:  #>   #>     Estimate Std. Error   t value     Pr(>|t|) #>   -0.1479761 0.01537516 -9.624367 6.309444e-22  # Estimate the average treatment effect using short-stacking with base #     learners ols, lasso, and ridge. ate_fit <- ddml_ate(y, D, X,                     learners = list(list(fun = ols),                                     list(fun = mdl_glmnet),                                     list(fun = mdl_glmnet,                                          args = list(alpha = 0))),                     ensemble_type = 'nnls',                     shortstack = TRUE,                     sample_folds = 2,                     silent = TRUE) summary(ate_fit) #> ATE estimation results:  #>   #>        Estimate Std. Error   t value     Pr(>|t|) #> nnls -0.1463129 0.01526313 -9.586033 9.153697e-22"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_fpliv.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","title":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","text":"Estimator flexible partially linear IV model.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_fpliv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","text":"","code":"ddml_fpliv(   y,   D,   Z,   X,   learners,   learners_DXZ = learners,   learners_DX = learners,   sample_folds = 2,   ensemble_type = \"nnls\",   shortstack = FALSE,   cv_folds = 5,   enforce_LIE = TRUE,   subsamples = NULL,   cv_subsamples_list = NULL,   silent = F )"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_fpliv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","text":"y outcome variable. D endogenous variable. Z (sparse) matrix instruments. X (sparse) matrix control variables. learners May take one two forms, depending whether single learner stacking multiple learners used estimation conditional expectation functions. single learner used, learners list two named elements: base learner function. function must predicts named input y using named input X. args Optional arguments passed . stacking multiple learners used, learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding control variables X passed base learner. assign_Z optional vector column indices corresponding instruments Z passed base learner. Omission args element results default arguments used fun. Omission assign_X (/assign_Z) results inclusion variables X (/Z). learners_DXZ Optional argument allow different estimators \\(E[D \\vert X, Z]\\). Setup identical learners. learners_DX Optional argument allow different estimators \\(E[D|X]\\). Setup identical learners. sample_folds Number cross-fitting folds. ensemble_type Ensemble method combine base learners final estimate conditional expectation functions. Possible values : \"nnls\" Non-negative least squares. \"nnls1\" Non-negative least squares constraint weights sum one. \"singlebest\" Select base learner minimum MSPE. \"ols\" Ordinary least squares. \"average\" Simple average base learners. Multiple ensemble types may passed vector strings. shortstack Boolean use short-stacking. cv_folds Number folds used cross-validation ensemble construction. enforce_LIE Indicator equal 1 law iterated expectations enforced first stage. subsamples List vectors sample indices cross-fitting. cv_subsamples_list List lists, corresponding subsample containing vectors subsample indices cross-validation. silent Boolean silence estimation updates.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_fpliv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","text":"ddml_fpliv returns object S3 class ddml_fpliv. object class ddml_fpliv list containing following components: coef vector \\(\\theta_0\\) estimates. weights list matrices, providing weight assigned base learner (chronological order) ensemble procedure. mspe list matrices, providing MSPE base learner (chronological order) computed cross-validation step ensemble construction. iv_fit Object class ivreg IV regression \\(Y - \\hat{E}[Y\\vert X]\\) \\(D - \\hat{E}[D\\vert X]\\) using \\(\\hat{E}[D\\vert X,Z] - \\hat{E}[D\\vert X]\\) instrument. learners,learners_DX,learners_DXZ, subsamples,cv_subsamples_list,ensemble_type Pass-selected user-provided arguments. See .","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_fpliv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","text":"ddml_fpliv provides double/debiased machine learning estimator parameter interest \\(\\theta_0\\) partially linear IV model given \\(Y = \\theta_0D + g_0(X) + U,\\) \\((Y, D, X, Z, U)\\) random vector \\(E[U\\vert X, Z] = 0\\) \\(E[Var(E[D\\vert X, Z]\\vert X)] \\neq 0\\), \\(g_0\\) unknown nuisance function.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_fpliv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). \"ddml: Double/debiased machine learning Stata.\" https://arxiv.org/abs/2301.09397 Chernozhukov V, Chetverikov D, Demirer M, Duflo E, Hansen C B, Newey W, Robins J (2018). \"Double/debiased machine learning treatment structural parameters.\" Econometrics Journal, 21(1), C1-C68. Wolpert D H (1992). \"Stacked generalization.\" Neural Networks, 5(2), 241-259.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/ddml_fpliv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator for the Flexible Partially Linear IV Model. — ddml_fpliv","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] Z = AE98[, \"samesex\", drop = FALSE] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Estimate the partially linear IV model using a single base learner: Ridge. fpliv_fit <- ddml_fpliv(y, D, Z, X,                         learners = list(what = mdl_glmnet,                                         args = list(alpha = 0)),                         sample_folds = 2,                         silent = TRUE) summary(fpliv_fit) #> FPLIV estimation results:  #>   #> , , single base learner #>  #>                  Estimate  Std. Error      t value  Pr(>|t|) #> (Intercept) -4.714278e-05 0.006891215 -0.006840997 0.9945417 #> D_r         -1.701931e-01 0.173793613 -0.979282916 0.3274402 #>   # Estimate the partially linear IV model using short-stacking with base #     ols, lasso, and ridge. fpliv_fit <- ddml_fpliv(y, D, Z, X,                         learners = list(list(fun = ols),                                         list(fun = mdl_glmnet),                                         list(fun = mdl_glmnet,                                              args = list(alpha = 0))),                         ensemble_type = 'nnls',                         shortstack = TRUE,                         sample_folds = 2,                         silent = TRUE) summary(fpliv_fit) #> FPLIV estimation results:  #>   #> , , nnls #>  #>                Estimate  Std. Error    t value  Pr(>|t|) #> (Intercept)  0.00135661 0.006899657  0.1966199 0.8441250 #> D_r         -0.20022487 0.193594750 -1.0342474 0.3010205 #>"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_late.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator of the Local Average Treatment Effect. — ddml_late","title":"Estimator of the Local Average Treatment Effect. — ddml_late","text":"Estimator local average treatment effect.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_late.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator of the Local Average Treatment Effect. — ddml_late","text":"","code":"ddml_late(   y,   D,   Z,   X,   learners,   learners_DXZ = learners,   learners_ZX = learners,   sample_folds = 2,   ensemble_type = \"nnls\",   shortstack = FALSE,   cv_folds = 5,   subsamples_Z0 = NULL,   subsamples_Z1 = NULL,   cv_subsamples_list_Z0 = NULL,   cv_subsamples_list_Z1 = NULL,   silent = F )"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_late.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator of the Local Average Treatment Effect. — ddml_late","text":"y outcome variable. D Binary endogenous variable interest. Z Binary instrumental variable. X (sparse) matrix control variables. learners May take one two forms, depending whether single learner stacking multiple learners used estimation conditional expectation functions. single learner used, learners list two named elements: base learner function. function must predicts named input y using named input X. args Optional arguments passed . stacking multiple learners used, learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding control variables X passed base learner. assign_Z optional vector column indices corresponding instruments Z passed base learner. Omission args element results default arguments used fun. Omission assign_X (/assign_Z) results inclusion variables X (/Z). learners_DXZ Optional argument allow different estimators \\(E[D \\vert X, Z]\\). Setup identical learners. learners_ZX Optional argument allow different estimators \\(E[Z\\vert X]\\). Setup identical learners. sample_folds Number cross-fitting folds. ensemble_type Ensemble method combine base learners final estimate conditional expectation functions. Possible values : \"nnls\" Non-negative least squares. \"nnls1\" Non-negative least squares constraint weights sum one. \"singlebest\" Select base learner minimum MSPE. \"ols\" Ordinary least squares. \"average\" Simple average base learners. Multiple ensemble types may passed vector strings. shortstack Boolean use short-stacking. cv_folds Number folds used cross-validation ensemble construction. subsamples_Z0, subsamples_Z1 List vectors sample indices cross-fitting, corresponding observations \\(Z=0\\) \\(Z=1\\), respectively. cv_subsamples_list_Z0, cv_subsamples_list_Z1 List lists, corresponding subsample containing vectors subsample indices cross-validation. Arguments separated observations \\(Z=0\\) \\(Z=1\\), respectively. silent Boolean silence estimation updates.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_late.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator of the Local Average Treatment Effect. — ddml_late","text":"ddml_late returns object S3 class ddml_late. object class ddml_late list containing following components: late vector average treatment effect estimates. weights list matrices, providing weight assigned base learner (chronological order) ensemble procedure. mspe list matrices, providing MSPE base learner (chronological order) computed cross-validation step ensemble construction. psi_a, psi_b Matrices needed computation scores. Used summary.ddml_late(). learners,learners_DXZ,learners_ZX, subsamples_Z0,subsamples_Z1, cv_subsamples_list_Z0,cv_subsamples_list_Z1, ensemble_type Pass-selected user-provided arguments. See .","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_late.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimator of the Local Average Treatment Effect. — ddml_late","text":"ddml_late provides double/debiased machine learning estimator local average treatment effect interactive model given \\(Y = g_0(D, X) + U,\\) \\((Y, D, X, Z, U)\\) random vector \\(\\operatorname{supp} D = \\operatorname{supp} Z = \\{0,1\\}\\), \\(E[U\\vert X, Z] = 0\\), \\(E[Var(E[D\\vert X, Z]\\vert X)] \\neq 0\\), \\(\\Pr(Z=1\\vert X) \\(0, 1)\\) probability 1, \\(p_0(1, X) \\geq p_0(0, X)\\) probability 1 \\(p_0(Z, X) \\equiv \\Pr(D=1\\vert Z, X)\\), \\(g_0\\) unknown nuisance function. model, local average treatment effect defined \\(\\theta_0^{\\textrm{LATE}} \\equiv     E[g_0(1, X) - g_0(0, X)\\vert p_0(1, X) > p(0, X)]\\).","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_late.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimator of the Local Average Treatment Effect. — ddml_late","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). \"ddml: Double/debiased machine learning Stata.\" https://arxiv.org/abs/2301.09397 Chernozhukov V, Chetverikov D, Demirer M, Duflo E, Hansen C B, Newey W, Robins J (2018). \"Double/debiased machine learning treatment structural parameters.\" Econometrics Journal, 21(1), C1-C68. Imbens G, Angrist J (1004). \"Identification Estimation Local Average Treatment Effects.\" Econometrica, 62(2), 467-475. Wolpert D H (1992). \"Stacked generalization.\" Neural Networks, 5(2), 241-259.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/ddml_late.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator of the Local Average Treatment Effect. — ddml_late","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] Z = AE98[, \"samesex\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Estimate the local average treatment effect using a single base learner, #     ridge. late_fit <- ddml_late(y, D, Z, X,                       learners = list(what = mdl_glmnet,                                       args = list(alpha = 0)),                       sample_folds = 2,                       silent = TRUE) summary(late_fit) #> LATE estimation results:  #>   #>     Estimate Std. Error   t value  Pr(>|t|) #>   -0.2224156  0.2177026 -1.021649 0.3069472  # Estimate the local average treatment effect using short-stacking with base #     learners ols, lasso, and ridge. late_fit <- ddml_late(y, D, Z, X,                       learners = list(list(fun = ols),                                       list(fun = mdl_glmnet),                                       list(fun = mdl_glmnet,                                            args = list(alpha = 0))),                       ensemble_type = 'nnls',                       shortstack = TRUE,                       sample_folds = 2,                       silent = TRUE) summary(late_fit) #> LATE estimation results:  #>   #>         Estimate Std. Error    t value  Pr(>|t|) #> nnls -0.09908688  0.1937749 -0.5113505 0.6091057"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_pliv.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator for the Partially Linear IV Model. — ddml_pliv","title":"Estimator for the Partially Linear IV Model. — ddml_pliv","text":"Estimator partially linear IV model.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_pliv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator for the Partially Linear IV Model. — ddml_pliv","text":"","code":"ddml_pliv(   y,   D,   Z,   X,   learners,   learners_DX = learners,   learners_ZX = learners,   sample_folds = 2,   ensemble_type = \"nnls\",   shortstack = FALSE,   cv_folds = 5,   subsamples = NULL,   cv_subsamples_list = NULL,   silent = F )"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_pliv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator for the Partially Linear IV Model. — ddml_pliv","text":"y outcome variable. D endogenous variable. Z instrumental variable. X (sparse) matrix control variables. learners May take one two forms, depending whether single learner stacking multiple learners used estimation conditional expectation functions. single learner used, learners list two named elements: base learner function. function must predicts named input y using named input X. args Optional arguments passed . stacking multiple learners used, learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding control variables X passed base learner. assign_Z optional vector column indices corresponding instruments Z passed base learner. Omission args element results default arguments used fun. Omission assign_X (/assign_Z) results inclusion variables X (/Z). learners_DX Optional argument allow different estimators \\(E[D|X]\\). Setup identical learners. learners_ZX Optional argument allow different estimators \\(E[Z\\vert X]\\). Setup identical learners. sample_folds Number cross-fitting folds. ensemble_type Ensemble method combine base learners final estimate conditional expectation functions. Possible values : \"nnls\" Non-negative least squares. \"nnls1\" Non-negative least squares constraint weights sum one. \"singlebest\" Select base learner minimum MSPE. \"ols\" Ordinary least squares. \"average\" Simple average base learners. Multiple ensemble types may passed vector strings. shortstack Boolean use short-stacking. cv_folds Number folds used cross-validation ensemble construction. subsamples List vectors sample indices cross-fitting. cv_subsamples_list List lists, corresponding subsample containing vectors subsample indices cross-validation. silent Boolean silence estimation updates.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_pliv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator for the Partially Linear IV Model. — ddml_pliv","text":"ddml_pliv returns object S3 class ddml_pliv. object class ddml_pliv list containing following components: coef vector \\(\\theta_0\\) estimates. weights list matrices, providing weight assigned base learner (chronological order) ensemble procedure. mspe list matrices, providing MSPE base learner (chronological order) computed cross-validation step ensemble construction. iv_fit Object class ivreg IV regression \\(Y - \\hat{E}[Y\\vert X]\\) \\(D - \\hat{E}[D\\vert X]\\) using \\(Z - \\hat{E}[Z\\vert X]\\) instrument. See also AER::ivreg() details. learners,learners_DX,learners_ZX, subsamples,cv_subsamples_list,ensemble_type Pass-selected user-provided arguments. See .","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_pliv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimator for the Partially Linear IV Model. — ddml_pliv","text":"ddml_pliv provides double/debiased machine learning estimator parameter interest \\(\\theta_0\\) partially linear IV model given \\(Y = \\theta_0D + g_0(X) + U,\\) \\((Y, D, X, Z, U)\\) random vector \\(E[Cov(U, Z\\vert X)] = 0\\) \\(E[Cov(D, Z\\vert X)] \\neq 0\\), \\(g_0\\) unknown nuisance function.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_pliv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimator for the Partially Linear IV Model. — ddml_pliv","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). \"ddml: Double/debiased machine learning Stata.\" https://arxiv.org/abs/2301.09397 Chernozhukov V, Chetverikov D, Demirer M, Duflo E, Hansen C B, Newey W, Robins J (2018). \"Double/debiased machine learning treatment structural parameters.\" Econometrics Journal, 21(1), C1-C68. Kleiber C, Zeileis (2008). Applied Econometrics R. Springer-Verlag, New York. Wolpert D H (1992). \"Stacked generalization.\" Neural Networks, 5(2), 241-259.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/ddml_pliv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator for the Partially Linear IV Model. — ddml_pliv","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] Z = AE98[, \"samesex\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Estimate the partially linear IV model using a single base learner, ridge. pliv_fit <- ddml_pliv(y, D, Z, X,                       learners = list(what = mdl_glmnet,                                       args = list(alpha = 0)),                       sample_folds = 2,                       silent = TRUE) summary(pliv_fit) #> PLIV estimation results:  #>   #> , , single base learner #>  #>                  Estimate  Std. Error     t value  Pr(>|t|) #> (Intercept) -0.0002086548 0.006903703 -0.03022361 0.9758887 #> D_r         -0.2193199372 0.202199792 -1.08466945 0.2780681 #>   # Estimate the partially linear IV model using short-stacking with base #     ols, lasso, and ridge. pliv_fit <- ddml_pliv(y, D, Z, X,                       learners = list(list(fun = ols),                                       list(fun = mdl_glmnet),                                       list(fun = mdl_glmnet,                                            args = list(alpha = 0))),                       ensemble_type = 'nnls',                       shortstack = TRUE,                       sample_folds = 2,                       silent = TRUE) summary(pliv_fit) #> PLIV estimation results:  #>   #> , , nnls #>  #>                  Estimate  Std. Error     t value  Pr(>|t|) #> (Intercept)  0.0006103524 0.006892788  0.08854942 0.9294400 #> D_r         -0.2030271208 0.194402352 -1.04436556 0.2963163 #>"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_plm.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator for the Partially Linear Model. — ddml_plm","title":"Estimator for the Partially Linear Model. — ddml_plm","text":"Estimator partially linear model.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_plm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator for the Partially Linear Model. — ddml_plm","text":"","code":"ddml_plm(   y,   D,   X,   learners,   learners_DX = learners,   sample_folds = 2,   ensemble_type = \"nnls\",   shortstack = FALSE,   cv_folds = 5,   subsamples = NULL,   cv_subsamples_list = NULL,   silent = FALSE )"},{"path":"https://thomaswiemann.com/ddml/reference/ddml_plm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator for the Partially Linear Model. — ddml_plm","text":"y outcome variable. D endogenous variable. X (sparse) matrix control variables. learners May take one two forms, depending whether single learner stacking multiple learners used estimation conditional expectation functions. single learner used, learners list two named elements: base learner function. function must predicts named input y using named input X. args Optional arguments passed . stacking multiple learners used, learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding control variables X passed base learner. Omission args element results default arguments used fun. Omission assign_X results inclusion variables X. learners_DX Optional argument allow different estimators \\(E[D|X]\\). Setup identical learners. sample_folds Number cross-fitting folds. ensemble_type Ensemble method combine base learners final estimate conditional expectation functions. Possible values : \"nnls\" Non-negative least squares. \"nnls1\" Non-negative least squares constraint weights sum one. \"singlebest\" Select base learner minimum MSPE. \"ols\" Ordinary least squares. \"average\" Simple average base learners. Multiple ensemble types may passed vector strings. shortstack Boolean use short-stacking. cv_folds Number folds used cross-validation ensemble construction. subsamples List vectors sample indices cross-fitting. cv_subsamples_list List lists, corresponding subsample containing vectors subsample indices cross-validation. silent Boolean silence estimation updates.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_plm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator for the Partially Linear Model. — ddml_plm","text":"ddml_plm returns object S3 class ddml_plm. object class ddml_plm list containing following components: coef vector \\(\\theta_0\\) estimates. weights list matrices, providing weight assigned base learner (chronological order) ensemble procedure. mspe list matrices, providing MSPE base learner (chronological order) computed cross-validation step ensemble construction. ols_fit Object class lm second stage regression \\(Y - \\hat{E}[Y|X]\\) \\(D - \\hat{E}[D|X]\\). learners,learners_DX,subsamples, cv_subsamples_list,ensemble_type Pass-selected user-provided arguments. See .","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_plm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimator for the Partially Linear Model. — ddml_plm","text":"ddml_plm provides double/debiased machine learning estimator parameter interest \\(\\theta_0\\) partially linear model given \\(Y = \\theta_0D + g_0(X) + U,\\) \\((Y, D, X, U)\\) random vector \\(E[Cov(U, D\\vert X)] = 0\\) \\(E[Var(D\\vert X)] \\neq 0\\), \\(g_0\\) unknown nuisance function.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ddml_plm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimator for the Partially Linear Model. — ddml_plm","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). \"ddml: Double/debiased machine learning Stata.\" https://arxiv.org/abs/2301.09397 Chernozhukov V, Chetverikov D, Demirer M, Duflo E, Hansen C B, Newey W, Robins J (2018). \"Double/debiased machine learning treatment structural parameters.\" Econometrics Journal, 21(1), C1-C68. Wolpert D H (1992). \"Stacked generalization.\" Neural Networks, 5(2), 241-259.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/ddml_plm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator for the Partially Linear Model. — ddml_plm","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Estimate the partially linear model using a single base learner, ridge. plm_fit <- ddml_plm(y, D, X,                     learners = list(what = mdl_glmnet,                                     args = list(alpha = 0)),                     sample_folds = 2,                     silent = TRUE) summary(plm_fit) #> PLM estimation results:  #>   #> , , single base learner #>  #>                  Estimate  Std. Error     t value     Pr(>|t|) #> (Intercept)  0.0003025452 0.006871961  0.04402604 9.648836e-01 #> D_r         -0.1467524171 0.014711278 -9.97550462 1.951071e-23 #>   # Estimate the partially linear model using short-stacking with base learners #     ols, lasso, and ridge plm_fit <- ddml_plm(y, D, X,                     learners = list(list(fun = ols),                                     list(fun = mdl_glmnet),                                     list(fun = mdl_glmnet,                                          args = list(alpha = 0))),                     ensemble_type = 'nnls',                     shortstack = TRUE,                     sample_folds = 2,                     silent = TRUE) summary(plm_fit) #> PLM estimation results:  #>   #> , , nnls #>  #>                 Estimate  Std. Error    t value     Pr(>|t|) #> (Intercept)  0.002121096 0.006892581  0.3077362 7.582831e-01 #> D_r         -0.145311959 0.014752769 -9.8498092 6.867423e-23 #>"},{"path":"https://thomaswiemann.com/ddml/reference/mdl_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for glmnet::glmnet(). — mdl_glmnet","title":"Wrapper for glmnet::glmnet(). — mdl_glmnet","text":"Simple wrapper glmnet::glmnet() glmnet::cv.glmnet().","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for glmnet::glmnet(). — mdl_glmnet","text":"","code":"mdl_glmnet(y, X, cv = TRUE, ...)"},{"path":"https://thomaswiemann.com/ddml/reference/mdl_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for glmnet::glmnet(). — mdl_glmnet","text":"y outcome variable. X (sparse) feature matrix. cv Boolean indicate use lasso cross-validated penalty. ... Additional arguments passed glmnet. See glmnet::glmnet() glmnet::cv.glmnet() complete list arguments.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for glmnet::glmnet(). — mdl_glmnet","text":"mdl_glmnet returns object S3 class mdl_glmnet simple mask return object glmnet::glmnet() glmnet::cv.glmnet().","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_glmnet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wrapper for glmnet::glmnet(). — mdl_glmnet","text":"Friedman J, Hastie T, Tibshirani R (2010). \"Regularization Paths Generalized Linear Models via Coordinate Descent.\" Journal Statistical Software, 33(1), 1–22. Simon N, Friedman J, Hastie T, Tibshirani R (2011). \"Regularization Paths Cox's Proportional Hazards Model via Coordinate Descent.\" Journal Statistical Software, 39(5), 1–13.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/mdl_glmnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for glmnet::glmnet(). — mdl_glmnet","text":"","code":"glmnet_fit <- mdl_glmnet(rnorm(100), matrix(rnorm(1000), 100, 10)) class(glmnet_fit) #> [1] \"mdl_glmnet\" \"cv.glmnet\""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_ranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for ranger::ranger(). — mdl_ranger","title":"Wrapper for ranger::ranger(). — mdl_ranger","text":"Simple wrapper ranger::ranger().","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_ranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for ranger::ranger(). — mdl_ranger","text":"","code":"mdl_ranger(y, X, ...)"},{"path":"https://thomaswiemann.com/ddml/reference/mdl_ranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for ranger::ranger(). — mdl_ranger","text":"y outcome variable. X feature matrix. ... Additional arguments passed ranger. See ranger::ranger() complete list arguments.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_ranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for ranger::ranger(). — mdl_ranger","text":"mdl_ranger returns object S3 class ranger simple mask return object ranger::ranger().","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_ranger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wrapper for ranger::ranger(). — mdl_ranger","text":"Wright M N, Ziegler (2017). \"ranger: fast implementation random forests high dimensional data C++ R.\" Journal Statistical Software 77(1), 1-17.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/mdl_ranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for ranger::ranger(). — mdl_ranger","text":"","code":"ranger_fit <- mdl_ranger(rnorm(100), matrix(rnorm(1000), 100, 10)) class(ranger_fit) #> [1] \"mdl_ranger\" \"ranger\""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for xgboost::xgboost(). — mdl_xgboost","title":"Wrapper for xgboost::xgboost(). — mdl_xgboost","text":"Simple wrapper xgboost::xgboost() changes default arguments.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for xgboost::xgboost(). — mdl_xgboost","text":"","code":"mdl_xgboost(y, X, nrounds = 500, verbose = 0, ...)"},{"path":"https://thomaswiemann.com/ddml/reference/mdl_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for xgboost::xgboost(). — mdl_xgboost","text":"y outcome variable. X (sparse) feature matrix. nrounds max number boosting iterations. verbose 0, xgboost stay silent. 1, print information performance. 2, additional information printed . Note setting verbose > 0 automatically engages cb.print.evaluation(period=1) callback function. ... Additional arguments passed xgboost. See xgboost::xgboost() complete list arguments.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for xgboost::xgboost(). — mdl_xgboost","text":"mdl_xgboost returns object S3 class mdl_xgboost simple mask return object xgboost::xgboost().","code":""},{"path":"https://thomaswiemann.com/ddml/reference/mdl_xgboost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wrapper for xgboost::xgboost(). — mdl_xgboost","text":"Chen T, Guestrin C (2011). \"Xgboost: Scalable Tree Boosting System.\" Proceedings 22nd ACM SIGKDD International Conference Knowledge Discovery Data Mining, 785–794.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/mdl_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for xgboost::xgboost(). — mdl_xgboost","text":"","code":"xgboost_fit <- mdl_xgboost(rnorm(100), matrix(rnorm(1000), 100, 10)) class(xgboost_fit) #> [1] \"mdl_xgboost\" \"xgb.Booster\""},{"path":"https://thomaswiemann.com/ddml/reference/ols.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinary least squares. — ols","title":"Ordinary least squares. — ols","text":"Simple implementation ordinary least squares computes sparse feature matrices.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinary least squares. — ols","text":"","code":"ols(y, X, const = FALSE, w = NULL)"},{"path":"https://thomaswiemann.com/ddml/reference/ols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinary least squares. — ols","text":"y outcome variable. X feature matrix. const Boolean equal TRUE constant included. default FALSE w vector weights weighted least squares.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/ols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinary least squares. — ols","text":"ols returns object S3 class ols. object class ols list containing following components: coef vector regression coefficents. y, X, const, w Pass-user-provided arguments. See .","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/ols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordinary least squares. — ols","text":"","code":"ols_fit <- ols(rnorm(100), cbind(rnorm(100), rnorm(100)), const = TRUE) ols_fit$coef #>              [,1] #> [1,]  0.057278284 #> [2,] -0.040444366 #> [3,]  0.005393859"},{"path":"https://thomaswiemann.com/ddml/reference/shortstacking.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions using Short-Stacking. — shortstacking","title":"Predictions using Short-Stacking. — shortstacking","text":"Predictions using short-stacking.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/shortstacking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions using Short-Stacking. — shortstacking","text":"","code":"shortstacking(   y,   X,   Z = NULL,   learners,   sample_folds = 2,   ensemble_type,   compute_insample_predictions = FALSE,   subsamples = NULL,   silent = FALSE,   progress = NULL,   auxilliary_X = NULL,   shortstack_y = y )"},{"path":"https://thomaswiemann.com/ddml/reference/shortstacking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions using Short-Stacking. — shortstacking","text":"y outcome variable. X (sparse) matrix predictive variables. Z Optional additional (sparse) matrix predictive variables. learners May take one two forms, depending whether single learner stacking multiple learners used estimation predictor. single learner used, learners list two named elements: base learner function. function must predicts named input y using named input X. args Optional arguments passed . stacking multiple learners used, learners list lists, containing four named elements: fun base learner function. function must predicts named input y using named input X. args Optional arguments passed fun. assign_X optional vector column indices corresponding predictive variables X passed base learner. assign_Z optional vector column indices corresponding predictive Z passed base learner. Omission args element results default arguments used fun. Omission assign_X (/assign_Z) results inclusion variables X (/Z). sample_folds Number cross-fitting folds. ensemble_type Ensemble method combine base learners final estimate conditional expectation functions. Possible values : \"nnls\" Non-negative least squares. \"nnls1\" Non-negative least squares constraint weights sum one. \"singlebest\" Select base learner minimum MSPE. \"ols\" Ordinary least squares. \"average\" Simple average base learners. Multiple ensemble types may passed vector strings. compute_insample_predictions Indicator equal 1 -sample predictions also computed. subsamples List vectors sample indices cross-fitting. silent Boolean silence estimation updates. progress String print learner cv fold progress. auxilliary_X optional list matrices length sample_folds, containing additional observations calculate predictions . shortstack_y Optional vector outcome variable form short-stacking predictions . Base learners always trained y.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/shortstacking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions using Short-Stacking. — shortstacking","text":"shortstack returns list containing following components: oos_fitted matrix --sample predictions, column corresponding ensemble type (chronological order). weights array, providing weight assigned base learner (chronological order) ensemble procedures. is_fitted compute_insample_predictions = T. list matrices -sample predictions sample fold. auxilliary_fitted auxilliary_X NULL, list matrices additional predictions. oos_fitted_bylearner matrix --sample predictions, column corresponding base learner (chronological order). is_fitted_bylearner compute_insample_predictions = T, list matrices -sample predictions sample fold. auxilliary_fitted_bylearner auxilliary_X NULL, list matrices additional predictions learner. Note unlike crosspred, shortstack always computes --sample predictions base learner (additional computational cost).","code":""},{"path":"https://thomaswiemann.com/ddml/reference/shortstacking.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predictions using Short-Stacking. — shortstacking","text":"Ahrens , Hansen C B, Schaffer M E, Wiemann T (2023). \"ddml: Double/debiased machine learning Stata.\" https://arxiv.org/abs/2301.09397 Wolpert D H (1992). \"Stacked generalization.\" Neural Networks, 5(2), 241-259.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/shortstacking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions using Short-Stacking. — shortstacking","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] X = AE98[, c(\"morekids\", \"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Compute predictions using shortstacking with base learners ols and lasso. #     Two stacking approaches are simultaneously computed: Equally #     weighted (ensemble_type = \"average\") and MSPE-minimizing with weights #     in the unit simplex (ensemble_type = \"nnls1\"). Predictions for each #     learner are also calculated. shortstack_res <- shortstacking(y, X,                                 learners = list(list(fun = ols),                                                 list(fun = mdl_glmnet)),                                 ensemble_type = c(\"average\",                                                   \"nnls1\",                                                   \"singlebest\"),                                 sample_folds = 2,                                 silent = TRUE) dim(shortstack_res$oos_fitted) # = length(y) by length(ensemble_type) #> [1] 5000    3 dim(shortstack_res$oos_fitted_bylearner) # = length(y) by length(learners) #> [1] 5000    2"},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_ate.html","id":null,"dir":"Reference","previous_headings":"","what":"Inference Methods for Treatment Effect Estimators. — summary.ddml_ate","title":"Inference Methods for Treatment Effect Estimators. — summary.ddml_ate","text":"Inference methods treatment effect estimators.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_ate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inference Methods for Treatment Effect Estimators. — summary.ddml_ate","text":"","code":"# S3 method for ddml_ate summary(object, ...)  # S3 method for ddml_late summary(object, ...)"},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_ate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inference Methods for Treatment Effect Estimators. — summary.ddml_ate","text":"object object class ddml_ate ddml_late, fitted ddml_ate() ddml_late(), respectively. ... Currently unused.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_ate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inference Methods for Treatment Effect Estimators. — summary.ddml_ate","text":"matrix inference results.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_ate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inference Methods for Treatment Effect Estimators. — summary.ddml_ate","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Estimate the average treatment effect using a single base learner, ridge. ate_fit <- ddml_ate(y, D, X,                     learners = list(what = mdl_glmnet,                                     args = list(alpha = 0)),                     sample_folds = 2,                     silent = TRUE) summary(ate_fit) #> ATE estimation results:  #>   #>     Estimate Std. Error   t value     Pr(>|t|) #>   -0.1476142 0.01518492 -9.721103 2.451116e-22"},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_plm.html","id":null,"dir":"Reference","previous_headings":"","what":"Inference Methods for Partially Linear Estimators. — summary.ddml_fpliv","title":"Inference Methods for Partially Linear Estimators. — summary.ddml_fpliv","text":"Inference methods partially linear estimators. Simple wrapper sandwich::vcovHC().","code":""},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_plm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inference Methods for Partially Linear Estimators. — summary.ddml_fpliv","text":"","code":"# S3 method for ddml_fpliv summary(object, ...)  # S3 method for ddml_pliv summary(object, ...)  # S3 method for ddml_plm summary(object, ...)"},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_plm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inference Methods for Partially Linear Estimators. — summary.ddml_fpliv","text":"object object class ddml_plm, ddml_pliv, ddml_fpliv fitted ddml_plm(), ddml_pliv(), ddml_fpliv(), respectively. ... Additional arguments passed vcovHC. See sandwich::vcovHC() complete list arguments.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_plm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inference Methods for Partially Linear Estimators. — summary.ddml_fpliv","text":"array inference results ensemble_type.","code":""},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_plm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inference Methods for Partially Linear Estimators. — summary.ddml_fpliv","text":"Zeileis (2004). \"Econometric Computing HC HAC Covariance Matrix Estimators.” Journal Statistical Software, 11(10), 1-17. Zeileis (2006). “Object-Oriented Computation Sandwich Estimators.” Journal Statistical Software, 16(9), 1-16. Zeileis , Köll S, Graham N (2020). “Various Versatile Variances: Object-Oriented Implementation Clustered Covariances R.” Journal Statistical Software, 95(1), 1-36.","code":""},{"path":[]},{"path":"https://thomaswiemann.com/ddml/reference/summary.ddml_plm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inference Methods for Partially Linear Estimators. — summary.ddml_fpliv","text":"","code":"# Construct variables from the included Angrist & Evans (1998) data y = AE98[, \"worked\"] D = AE98[, \"morekids\"] X = AE98[, c(\"age\",\"agefst\",\"black\",\"hisp\",\"othrace\",\"educ\")]  # Estimate the partially linear model using a single base learner, ridge. plm_fit <- ddml_plm(y, D, X,                     learners = list(what = mdl_glmnet,                                     args = list(alpha = 0)),                     sample_folds = 2,                     silent = TRUE) summary(plm_fit) #> PLM estimation results:  #>   #> , , single base learner #>  #>                  Estimate  Std. Error      t value     Pr(>|t|) #> (Intercept) -0.0002587636 0.006872327  -0.03765298 9.699644e-01 #> D_r         -0.1484637359 0.014698989 -10.10026835 5.509123e-24 #>"}]
