% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ddml_policy.R
\name{ddml_policy}
\alias{ddml_policy}
\title{Estimators of a Multi-Action Policy's Expected Value.}
\usage{
ddml_policy(
  y,
  D,
  X,
  policy,
  policy_levels = sort(unique(policy)),
  learners,
  learners_DX = learners,
  sample_folds = 10,
  ensemble_type = "nnls",
  shortstack = FALSE,
  cv_folds = 10,
  custom_ensemble_weights = NULL,
  custom_ensemble_weights_DX = custom_ensemble_weights,
  cluster_variable = seq_along(y),
  subsamples_byD = NULL,
  cv_subsamples_byD = NULL,
  oos_pred = NULL,
  trim = 0.01,
  silent = FALSE
)
}
\arguments{
\item{y}{The outcome variable.}

\item{D}{The observed discrete treatment variable.}

\item{X}{A (sparse) matrix of control variables.}

\item{policy}{The policy-assigned treatment variable.}

\item{policy_levels}{A vector of the unique values the policy. These are the
treatment levels that the reduced form functions will be estimated for.}

\item{learners}{May take one of two forms, depending on whether a single
learner or stacking with multiple learners is used for estimation of the
conditional expectation functions.
If a single learner is used, \code{learners} is a list with two named
elements:
\itemize{
\item{\code{what} The base learner function. The function must be
such that it predicts a named input \code{y} using a named input
\code{X}.}
\item{\code{args} Optional arguments to be passed to \code{what}.}
}
If stacking with multiple learners is used, \code{learners} is a list of
lists, each containing four named elements:
\itemize{
\item{\code{fun} The base learner function. The function must be
such that it predicts a named input \code{y} using a named input
\code{X}.}
\item{\code{args} Optional arguments to be passed to \code{fun}.}
\item{\code{assign_X} An optional vector of column indices
corresponding to control variables in \code{X} that are passed to
the base learner.}
}
Omission of the \code{args} element results in default arguments being
used in \code{fun}. Omission of \code{assign_X} results in inclusion of
all variables in \code{X}.}

\item{learners_DX}{Optional argument to allow for different estimators of
\eqn{E[D|X]}. Setup is identical to \code{learners}.}

\item{sample_folds}{Number of cross-fitting folds.}

\item{ensemble_type}{Ensemble method to combine base learners into final
estimate of the conditional expectation functions. Possible values are:
\itemize{
\item{\code{"nnls"} Non-negative least squares.}
\item{\code{"nnls1"} Non-negative least squares with the constraint
that all weights sum to one.}
\item{\code{"singlebest"} Select base learner with minimum MSPE.}
\item{\code{"ols"} Ordinary least squares.}
\item{\code{"average"} Simple average over base learners.}
}
Multiple ensemble types may be passed as a vector of strings.}

\item{shortstack}{Boolean to use short-stacking.}

\item{cv_folds}{Number of folds used for cross-validation in ensemble
construction.}

\item{custom_ensemble_weights}{A numerical matrix with user-specified
ensemble weights. Each column corresponds to a custom ensemble
specification, each row corresponds to a base learner in \code{learners}
(in chronological order). Optional column names are used to name the
estimation results corresponding the custom ensemble specification.}

\item{custom_ensemble_weights_DX}{Optional argument to allow for different
custom ensemble weights for \code{learners_DX}. Setup is identical to
\code{custom_ensemble_weights}. Note: \code{custom_ensemble_weights} and
\code{custom_ensemble_weights_DX} must have the same number of columns.}

\item{cluster_variable}{A vector of cluster indices.}

\item{subsamples_byD}{List of lists corresponding to the unique treatment
levels. Each list contains vectors with sample indices for
cross-fitting.}

\item{cv_subsamples_byD}{List of lists, each corresponding to one of the
unique treatment levels. Each of the lists contains lists, each
corresponding to a subsample and contains vectors with subsample indices
for cross-validation.}

\item{oos_pred}{A list containing arrays for the reduced form estimates. Can
Can be passed from the output of previously-fitted \code{ddml_policy}
objects. This allows rapid evaluation of multiple policies without
re-estimation of the nuisance functions.}

\item{trim}{Number in (0, 1) for trimming the estimated propensity scores at
\code{trim} and \code{1-trim}.}

\item{silent}{Boolean to silence estimation updates.}
}
\value{
\code{ddml_policy} returns an object of S3 class \code{ddml_policy}.
An object of class \code{ddml_policy} is a list containing the following
components:
\describe{
\item{\code{policy_value}}{A vector with the expected policy value
estimates.}
\item{\code{weights}}{A list of matrices, providing the weight
assigned to each base learner (in chronological order) by the
ensemble procedure.}
\item{\code{mspe}}{A list of matrices, providing the MSPE of each
base learner (in chronological order) computed by the
cross-validation step in the ensemble construction.}
\item{\code{psi_a}, \code{psi_b}}{Matrices needed for the computation
of scores. Used in \code{\link[=summary.ddml_policy]{summary.ddml_policy()}}.}
\item{\code{oos_pred}}{List of arrays, providing the reduced form
predicted values.}
\item{\code{learners},\code{learners_DX},\code{cluster_variable},
\code{subsamples_byD}
\code{cv_subsamples_byD},
\code{ensemble_type}}{Pass-through of
selected user-provided arguments. See above.}
}
}
\description{
Estimators of the expected value of a multi-action policy.
}
\details{
\code{ddml_policy} provides a double/debiased machine learning
estimator for the expected value of a multi-action policy
\eqn{\pi:\operatorname{supp} X \to \operatorname{supp} D = \{d_1, \ldots, d_K\}} given
by

\eqn{E[Y(\pi(X))],}

where \eqn{Y(\cdot)} are the potential payoffs at different values of the
policy.
}
\examples{
# TO DO!
}
\references{
TO DO!
}
\seealso{
\code{\link[=summary.ddml_policy]{summary.ddml_policy()}}

Other ddml: 
\code{\link{ddml_ate}()},
\code{\link{ddml_fpliv}()},
\code{\link{ddml_late}()},
\code{\link{ddml_pliv}()},
\code{\link{ddml_plm}()}
}
\concept{ddml}
